variables:
  GIT_SUBMODULE_STRATEGY: recursive
  IMAGE_NAME: ${CI_REGISTRY_IMAGE}/oais
  IS_DEVELOP: "false"

stages:
  - update
  - build
  - deploy

push-update:
  stage: update
  image: ubuntu:20.04
  # Only execute this job when the pipeline is triggered by the upstream repositories
  rules:
    - if: '$CI_PIPELINE_SOURCE == "pipeline"'
  script:
    - apt-get update
    - apt-get install -y git
    - cd /tmp
    - git clone --recurse-submodules "https://gitlab-ci:${GIT_ACCESS_TOKEN}@gitlab.cern.ch/digitalmemory/openshift-deploy.git"
    - cd openshift-deploy
    - git config user.name "GitLab CI"
    - git config user.email "ci@gitlab.cern.ch"
    - git submodule update --remote
    - git add .
    - git commit -am "Updating submodules" || true
    - git push

# Build and publish docker image using Kaniko.
# From https://gitlab.cern.ch/gitlabci-examples/build_docker_image/
build-docker-dev:
  stage: build
  rules:
    - if: '$CI_PIPELINE_SOURCE == "push"'
  image:
    name: gitlab-registry.cern.ch/ci-tools/docker-image-builder
    entrypoint: [""]
  script:
    - echo "Commit branch is $CI_COMMIT_BRANCH, Context file is $CI_PROJECT_DIR/$CI_COMMIT_BRANCH and dockerfile is in $CI_PROJECT_DIR/Dockerfile"
    - echo "{\"auths\":{\"$CI_REGISTRY\":{\"username\":\"$CI_REGISTRY_USER\",\"password\":\"$CI_REGISTRY_PASSWORD\"}}}" > /kaniko/.docker/config.json
    - /kaniko/executor --cache=false --context $CI_PROJECT_DIR/develop --dockerfile $CI_PROJECT_DIR/Dockerfile --destination "${IMAGE_NAME}_dev":latest --destination "${IMAGE_NAME}_dev":$CI_COMMIT_SHA
    - echo "Image pushed to ${IMAGE_NAME}:latest and ${IMAGE_NAME}:$CI_COMMIT_SHA"

deploy-dev:
  stage: deploy
  rules:
    - if: '$CI_PIPELINE_SOURCE == "push"'
  image: ubuntu:20.04
  script:
    - apt-get update
    - apt-get install -y curl
    # Download OpenShift client
    - curl https://mirror.openshift.com/pub/openshift-v4/clients/ocp/4.8.4/openshift-client-linux.tar.gz -o oc.tar.gz
    - tar -xf oc.tar.gz
    - mv ./oc /usr/bin/oc
    # Download Helm
    - curl https://get.helm.sh/helm-v3.6.3-linux-amd64.tar.gz -o helm.tar.gz
    - tar -xf helm.tar.gz
    - mv ./linux-amd64/helm /usr/bin/helm
    # Login
    - oc login --server="$DEV_OPENSHIFT_SERVER" --token="$DEV_OPENSHIFT_TOKEN"
    # Upgrade
    - oc project dm-luteus
    - >-
      helm upgrade -f ./develop/values.yaml "$DEV_HELM_NAME" ./oais-openshift --install
      --set oais.image="${IMAGE_NAME}_dev":${CI_COMMIT_SHA}

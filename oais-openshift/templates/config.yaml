apiVersion: v1
kind: ConfigMap
metadata:
  name: oais-platform-config
data:
  __init__.py: |
    import os

    # Set variables to the values passed to the chart

    SECRET_KEY = os.environ["DJANGO_SECRET_KEY"]

    {{- if .Values.oais.checkHostname }}
    ALLOWED_HOSTS = [ {{ .Values.oais.hostname | quote }} ]
    {{- else }}
    ALLOWED_HOSTS = [ "*" ]
    {{- end }}

    SECURE_PROXY_SSL_HEADER = ("HTTP_X_FORWARDED_PROTO", "https")

    DEBUG = False

    BIC_UPLOAD_PATH = {{ .Values.oais.sipPath | quote }}

    BASE_URL = "https://" + {{ .Values.oais.hostname | quote }}

    # Finish the URL with a / or the urljoin won't work
    FILES_URL = "https://new.cernbox.cern.ch/files/spaces/"

    SIP_UPSTREAM_BASEPATH = BIC_UPLOAD_PATH
    AIP_UPSTREAM_BASEPATH = {{ .Values.oais.aipPath | quote }}

    LOGIN_REDIRECT_URL = "/login/callback"

    DATABASES = {
      "default": {
        "ENGINE": "django.db.backends.postgresql",
        "NAME": os.environ["POSTGRESQL_DATABASE"],
        "USER": os.environ["POSTGRESQL_USER"],
        "PASSWORD": os.environ["POSTGRESQL_PASSWORD"],
        "HOST": os.environ["DB_HOST"],
      }
    }

    AM_URL = {{ .Values.archivematica.archivematica_url | quote }}
    AM_USERNAME = {{ .Values.archivematica.am_username | quote }}
    AM_API_KEY = os.environ["AM_API_KEY"]
    AM_SS_URL = {{ .Values.archivematica.am_ss_url | quote }}
    AM_SS_USERNAME = {{ .Values.archivematica.am_ss_username | quote }}
    AM_SS_API_KEY = os.environ["AM_SS_API_KEY"]
    AM_TRANSFER_SOURCE = {{ .Values.archivematica.am_transfer_source_uuid | quote }}
    AM_ABS_DIRECTORY = {{ .Values.archivematica.am_abs_directory | quote }}
    AM_REL_DIRECTORY = {{ .Values.archivematica.am_rel_directory | quote }}

    FTS_INSTANCE = {{ .Values.fts.instance | quote }}
    CTA_BASE_PATH = {{ .Values.cta.base_path | quote }}

    # Those two files are mounted from the secret "grid-credentials"
    # The paths are set in the volume and volumeMounts details of the oais-platform service 
    # (oais-platform.yaml)
    FTS_GRID_CERT = "/etc/certificates/public.pem"
    FTS_GRID_CERT_KEY = "/etc/certificates/private.key"

    # This file is imported at the end of Django's settings.py,
    #  adding the variables to the "__all__" namespace will make them override everything else.
    __all__ = [
      "FILES_URL",
      "SIP_UPSTREAM_BASEPATH",
      "AIP_UPSTREAM_BASEPATH",
      "BIC_UPLOAD_PATH",
      "ALLOWED_HOSTS",
      "DEBUG",
      "LOGIN_REDIRECT_URL",
      "SECURE_PROXY_SSL_HEADER",
      "SECRET_KEY",
      "DATABASES",
      "AM_URL",
      "AM_USERNAME",
      "AM_API_KEY",
      "AM_SS_URL",
      "AM_SS_USERNAME",
      "AM_SS_API_KEY",
      "AM_TRANSFER_SOURCE",
      "AM_ABS_DIRECTORY" ,
      "AM_REL_DIRECTORY",
      "FTS_INSTANCE",
      "FTS_GRID_CERT",
      "FTS_GRID_CERT_KEY",
      "CTA_BASE_PATH"
    ]
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: nginx-config
data:
  oais.conf: |
    server {
      listen 8080;

      {{- if .Values.oais.checkHostname }}
      server_name {{ .Values.oais.hostname }};
      {{- else }}
      server_name _;
      {{- end }}

      # Django admin panel
      location /admin {
          try_files $uri @proxy_api;
      }

       # Point /api paths to the API served by Django
      location /api {
          try_files $uri @proxy_api;
      }

      # Reroute everything else to the React application
      # and allow clean urls (using BrowserRouter/History API)
      location / {
          root /shared-assets;
          index index.html;
          try_files $uri $uri/ /index.html;
      }

      # Reverse proxy for Django
      location @proxy_api {
          proxy_set_header Host $http_host;
          proxy_set_header X-Real-IP $remote_addr;
          proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
          proxy_set_header X-Forwarded-Proto $http_x_forwarded_proto;
          proxy_pass http://localhost:8000;
      }
    }
